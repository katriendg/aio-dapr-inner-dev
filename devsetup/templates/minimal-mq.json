{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
      "description": "This template deploys Azure IoT Operations with only minimal components MQ and Extensions."
    },
    "parameters": {
      "clusterName": {
        "type": "string"
      },
      "clusterLocation": {
        "type": "string",
        "defaultValue": "[parameters('location')]",
        "allowedValues": [
          "eastus",
          "eastus2",
          "westus",
          "westus2",
          "westus3",
          "westeurope",
          "northeurope",
          "eastus2euap"
        ]
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "allowedValues": [
          "eastus",
          "eastus2",
          "westus",
          "westus2",
          "westus3",
          "westeurope",
          "northeurope",
          "eastus2euap"
        ]
      },
      "customLocationName": {
        "type": "string",
        "defaultValue": "[format('{0}-cl', parameters('clusterName'))]"
      },
      "simulatePLC": {
        "type": "bool",
        "defaultValue": false
      },
      "targetName": {
        "type": "string",
        "defaultValue": "[format('{0}-target', toLower(parameters('clusterName')))]"
      },
      "mqInstanceName": {
        "type": "string",
        "defaultValue": "mq-instance"
      },
      "mqFrontendServer": {
        "type": "string",
        "defaultValue": "mq-dmqtt-frontend"
      },
      "mqListenerName": {
        "type": "string",
        "defaultValue": "listener"
      },
      "mqBrokerName": {
        "type": "string",
        "defaultValue": "broker"
      },
      "mqAuthnName": {
        "type": "string",
        "defaultValue": "authn"
      },
      "mqFrontendReplicas": {
        "type": "int",
        "defaultValue": 2
      },
      "mqFrontendWorkers": {
        "type": "int",
        "defaultValue": 2
      },
      "mqBackendRedundancyFactor": {
        "type": "int",
        "defaultValue": 2
      },
      "mqBackendWorkers": {
        "type": "int",
        "defaultValue": 2
      },
      "mqBackendPartitions": {
        "type": "int",
        "defaultValue": 2
      },
      "mqMode": {
        "type": "string",
        "defaultValue": "distributed",
        "allowedValues": [
          "auto",
          "distributed"
        ]
      },
      "mqMemoryProfile": {
        "type": "string",
        "defaultValue": "medium",
        "allowedValues": [
          "tiny",
          "low",
          "medium",
          "high"
        ]
      },
      "mqServiceType": {
        "type": "string",
        "defaultValue": "clusterIp",
        "allowedValues": [
          "clusterIp",
          "loadBalancer",
          "nodePort"
        ]
      },
      "mqSecrets": {
        "type": "object",
        "defaultValue": {
          "enabled": true,
          "secretProviderClassName": "aio-default-spc",
          "servicePrincipalSecretRef": "aio-akv-sp"
        }
      },
      "opcUaBrokerSecrets": {
        "type": "object",
        "defaultValue": {
          "kind": "csi",
          "csiServicePrincipalSecretRef": "aio-akv-sp"
        }
      }
    },
    "variables": {
      "AIO_CLUSTER_RELEASE_NAMESPACE": "azure-iot-operations",
      "AIO_EXTENSION_SCOPE": {
        "cluster": {
          "releaseNamespace": "[variables('AIO_CLUSTER_RELEASE_NAMESPACE')]"
        }
      },
      "AIO_TRUST_CONFIG_MAP": "aio-ca-trust-bundle-test-only",
      "AIO_TRUST_ISSUER": "aio-ca-issuer",
      "AIO_TRUST_CONFIG_MAP_KEY": "ca.crt",
      "AIO_TRUST_SECRET_NAME": "aio-ca-key-pair-test-only",
      "OBSERVABILITY": {
        "genevaCollectorAddressNoProtocol": "[format('geneva-metrics-service.{0}.svc.cluster.local:4317', variables('AIO_CLUSTER_RELEASE_NAMESPACE'))]",
        "otelCollectorAddressNoProtocol": "[format('aio-otel-collector.{0}.svc.cluster.local:4317', variables('AIO_CLUSTER_RELEASE_NAMESPACE'))]",
        "otelCollectorAddress": "[format('http://aio-otel-collector.{0}.svc.cluster.local:4317', variables('AIO_CLUSTER_RELEASE_NAMESPACE'))]",
        "genevaCollectorAddress": "[format('http://geneva-metrics-service.{0}.svc.cluster.local:4317', variables('AIO_CLUSTER_RELEASE_NAMESPACE'))]"
      },
      "MQ_PROPERTIES": {
        "domain": "[format('aio-mq-dmqtt-frontend.{0}', variables('AIO_CLUSTER_RELEASE_NAMESPACE'))]",
        "port": 1883,
        "localUrl": "[format('mqtts://aio-mq-dmqtt-frontend.{0}:1883', variables('AIO_CLUSTER_RELEASE_NAMESPACE'))]",
        "name": "aio-mq-dmqtt-frontend",
        "satAudience": "aio-mq"
      },
      "__VERSION__": "0.1.0-preview",
      "__TRAIN__": "preview",
      "VERSIONS": {
        "adr": "[variables('__VERSION__')]",
        "opcUaBroker": "[variables('__VERSION__')]",
        "observability": "[variables('__VERSION__')]",
        "akri": "[variables('__VERSION__')]",
        "mq": "[variables('__VERSION__')]",
        "aio": "[variables('__VERSION__')]",
        "layeredNetworking": "[variables('__VERSION__')]",
        "processor": "[variables('__VERSION__')]"
      },
      "TRAINS": {
        "mq": "[variables('__TRAIN__')]",
        "aio": "[variables('__TRAIN__')]",
        "processor": "[variables('__TRAIN__')]",
        "adr": "[variables('__TRAIN__')]",
        "akri": "[variables('__TRAIN__')]",
        "layeredNetworking": "[variables('__TRAIN__')]",
        "opcUaBroker": "helm",
        "observability": "helm"
      },
      "broker_fe_issuer_configuration": {
        "name": "mq-fe-issuer-configuration",
        "type": "yaml.k8s",
        "properties": {
          "resource": {
            "apiVersion": "cert-manager.io/v1",
            "kind": "Issuer",
            "metadata": {
              "name": "[parameters('mqFrontendServer')]"
            },
            "spec": {
              "ca": {
                "secretName": "[variables('AIO_TRUST_SECRET_NAME')]"
              }
            }
          }
        }
      },
      "observability_helmChart": {
        "name": "aio-observability",
        "type": "helm.v3",
        "properties": {
          "chart": {
            "repo": "azureiotoperations.azurecr.io/helm/opentelemetry-collector",
            "version": "[variables('VERSIONS').observability]"
          },
          "values": {
            "mode": "deployment",
            "fullnameOverride": "aio-otel-collector",
            "config": {
              "processors": {
                "memory_limiter": {
                  "limit_percentage": 80,
                  "spike_limit_percentage": 10,
                  "check_interval": "60s"
                }
              },
              "receivers": {
                "jaeger": null,
                "prometheus": null,
                "zipkin": null,
                "otlp": {
                  "protocols": {
                    "grpc": {
                      "endpoint": ":4317"
                    },
                    "http": {
                      "endpoint": ":4318"
                    }
                  }
                }
              },
              "exporters": {
                "prometheus": {
                  "endpoint": ":8889",
                  "resource_to_telemetry_conversion": {
                    "enabled": true
                  }
                }
              },
              "service": {
                "extensions": [
                  "health_check"
                ],
                "pipelines": {
                  "metrics": {
                    "receivers": [
                      "otlp"
                    ],
                    "exporters": [
                      "prometheus"
                    ]
                  },
                  "logs": null,
                  "traces": null
                },
                "telemetry": null
              },
              "extensions": {
                "memory_ballast": {
                  "size_mib": 0
                }
              }
            },
            "resources": {
              "limits": {
                "cpu": "100m",
                "memory": "512Mi"
              }
            },
            "ports": {
              "metrics": {
                "enabled": true,
                "containerPort": 8889,
                "servicePort": 8889,
                "protocol": "TCP"
              },
              "jaeger-compact": {
                "enabled": false
              },
              "jaeger-grpc": {
                "enabled": false
              },
              "jaeger-thrift": {
                "enabled": false
              },
              "zipkin": {
                "enabled": false
              }
            }
          }
        }
      }
    },
    "resources": [
      {
        "type": "Microsoft.KubernetesConfiguration/extensions",
        "apiVersion": "2022-03-01",
        "scope": "[format('Microsoft.Kubernetes/connectedClusters/{0}', parameters('clusterName'))]",
        "name": "azure-iot-operations",
        "identity": {
          "type": "SystemAssigned"
        },
        "properties": {
          "extensionType": "microsoft.iotoperations",
          "version": "[variables('VERSIONS').aio]",
          "releaseTrain": "[variables('TRAINS').aio]",
          "autoUpgradeMinorVersion": false,
          "scope": "[variables('AIO_EXTENSION_SCOPE')]",
          "configurationSettings": {
            "rbac.cluster.admin": "true",
            "aioTrust.enabled": "true",
            "aioTrust.secretName": "[variables('AIO_TRUST_SECRET_NAME')]",
            "aioTrust.configmapName": "[variables('AIO_TRUST_CONFIG_MAP')]",
            "aioTrust.issuerName": "[variables('AIO_TRUST_ISSUER')]",
            "Microsoft.CustomLocation.ServiceAccount": "default",
            "otelCollectorAddress": "[variables('OBSERVABILITY').otelCollectorAddressNoProtocol]",
            "genevaCollectorAddress": "[variables('OBSERVABILITY').genevaCollectorAddressNoProtocol]"
          }
        }
      },
      {
        "type": "Microsoft.KubernetesConfiguration/extensions",
        "apiVersion": "2022-03-01",
        "scope": "[format('Microsoft.Kubernetes/connectedClusters/{0}', parameters('clusterName'))]",
        "name": "mq",
        "identity": {
          "type": "SystemAssigned"
        },
        "properties": {
          "extensionType": "microsoft.iotoperations.mq",
          "version": "[variables('VERSIONS').mq]",
          "releaseTrain": "[variables('TRAINS').mq]",
          "autoUpgradeMinorVersion": false,
          "scope": "[variables('AIO_EXTENSION_SCOPE')]",
          "configurationSettings": {
            "global.quickstart": "false",
            "global.openTelemetryCollectorAddr": "[variables('OBSERVABILITY').otelCollectorAddress]",
            "secrets.enabled": "[parameters('mqSecrets').enabled]",
            "secrets.secretProviderClassName": "[parameters('mqSecrets').secretProviderClassName]",
            "secrets.servicePrincipalSecretRef": "[parameters('mqSecrets').servicePrincipalSecretRef]"
          }
        },
        "dependsOn": [
          "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'azure-iot-operations')]"
        ]
      },
      {
        "type": "Microsoft.ExtendedLocation/customLocations",
        "apiVersion": "2021-08-31-preview",
        "name": "[parameters('customLocationName')]",
        "location": "[parameters('clusterLocation')]",
        "properties": {
          "hostResourceId": "[resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName'))]",
          "namespace": "[variables('AIO_CLUSTER_RELEASE_NAMESPACE')]",
          "displayName": "[parameters('customLocationName')]",
          "clusterExtensionIds": [
            "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'azure-iot-operations')]",
            "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'mq')]"
          ]
        },
        "dependsOn": [
          "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'azure-iot-operations')]",
          "[extensionResourceId(resourceId('Microsoft.Kubernetes/connectedClusters', parameters('clusterName')), 'Microsoft.KubernetesConfiguration/extensions', 'mq')]"
        ]
      },
      {
        "type": "Microsoft.ExtendedLocation/customLocations/resourceSyncRules",
        "apiVersion": "2021-08-31-preview",
        "name": "[format('{0}/{1}', parameters('customLocationName'), format('{0}-aio-sync', parameters('customLocationName')))]",
        "location": "[parameters('clusterLocation')]",
        "properties": {
          "priority": 100,
          "selector": {
            "matchLabels": {
              "management.azure.com/provider-name": "microsoft.iotoperationsorchestrator"
            }
          },
          "targetResourceGroup": "[resourceGroup().id]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.ExtendedLocation/customLocations', parameters('customLocationName'))]"
        ]
      },
      {
        "type": "Microsoft.ExtendedLocation/customLocations/resourceSyncRules",
        "apiVersion": "2021-08-31-preview",
        "name": "[format('{0}/{1}', parameters('customLocationName'), format('{0}-adr-sync', parameters('customLocationName')))]",
        "location": "[parameters('clusterLocation')]",
        "properties": {
          "priority": 200,
          "selector": {
            "matchLabels": {
              "management.azure.com/provider-name": "Microsoft.DeviceRegistry"
            }
          },
          "targetResourceGroup": "[resourceGroup().id]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.ExtendedLocation/customLocations', parameters('customLocationName'))]",
          "[resourceId('Microsoft.ExtendedLocation/customLocations/resourceSyncRules', parameters('customLocationName'), format('{0}-mq-sync', parameters('customLocationName')))]"
        ]
      },
      {
        "type": "Microsoft.ExtendedLocation/customLocations/resourceSyncRules",
        "apiVersion": "2021-08-31-preview",
        "name": "[format('{0}/{1}', parameters('customLocationName'), format('{0}-mq-sync', parameters('customLocationName')))]",
        "location": "[parameters('clusterLocation')]",
        "properties": {
          "priority": 400,
          "selector": {
            "matchLabels": {
              "management.azure.com/provider-name": "microsoft.iotoperationsmq"
            }
          },
          "targetResourceGroup": "[resourceGroup().id]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.ExtendedLocation/customLocations', parameters('customLocationName'))]"
        ]
      },
      {
        "type": "Microsoft.IoTOperationsMQ/mq",
        "apiVersion": "2023-10-04-preview",
        "name": "[parameters('mqInstanceName')]",
        "location": "[parameters('location')]",
        "extendedLocation": {
          "name": "[resourceId('Microsoft.ExtendedLocation/customLocations', parameters('customLocationName'))]",
          "type": "CustomLocation"
        },
        "properties": {},
        "dependsOn": [
          "[resourceId('Microsoft.ExtendedLocation/customLocations', parameters('customLocationName'))]",
          "[resourceId('Microsoft.ExtendedLocation/customLocations/resourceSyncRules', parameters('customLocationName'), format('{0}-mq-sync', parameters('customLocationName')))]"
        ]
      }
    ],
    "outputs": {
      "customLocationId": {
        "type": "string",
        "value": "[resourceId('Microsoft.ExtendedLocation/customLocations', parameters('customLocationName'))]"
      },
      "customLocationName": {
        "type": "string",
        "value": "[parameters('customLocationName')]"
      },
      "targetName": {
        "type": "string",
        "value": "[parameters('targetName')]"
      },
      "aioNamespace": {
        "type": "string",
        "value": "[variables('AIO_CLUSTER_RELEASE_NAMESPACE')]"
      },
      "mq": {
        "type": "object",
        "value": "[variables('MQ_PROPERTIES')]"
      },
      "observability": {
        "type": "object",
        "value": "[variables('OBSERVABILITY')]"
      }
    }
  }